
JDK:
1下载jdk
                http://www.oracle.com/technetwork/java/javase/downloads/index.html
                下载jdk-6u14-linux-i586.bin"
2解压文件
                chmod u+x jdk-6u14-linux-i586.bin
                sudo ./jdk-6u14-linux-i586.bin
3配置环境变量
                sudo gedit ~/.bashrc 
                #set java environment
                JAVA_HOME=/home/liyouliang/develop/jdk1.6.0_14
                export JRE_HOME=/home/liyouliang/develop/jdk1.6.0_14/jre
                export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH
                export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH
4 保存后，同步更新
                source ~/.bashrc
5Help
                http://forum.ubuntu.org.cn/viewtopic.php?t=183803

SDK:
1下载sdk for linux
                http://developer.android.com/sdk/index.html
2解压缩，并更新
				sudo apt-get install ia32-libs
                cd ~/android-sdk-linux/tools 2 ./andirod
				
				http://www.myexception.cn/mobile/1462550.html
				http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&tid=5107
				
				
				ubuntu 13.10 ia32-libs不能安装处理办法
				在ubuntu13.10下配置andorid开发环境时发现没有ia32-libs，模拟器不能运行。
				原因是adb用到了ia32-libs库，但是却安装不了。

				google了好久发现了个办法，记录下。

				$sudo apt-get install libstdc++6 
				$sudo apt-get install lib32stdc++6
				
				
3配置环境变量
                sudo gedit ~/.bashrc
                #set path for android sdk tools
                export PATH=$PATH:~/android-sdk-linux/tools/
                export PATH=$PATH:~/android-sdk-linux/platform-tools/
4保存后，同步更新
                source ~/.bashrc
5关闭adb服务，切换到root，重启adb服务，离开root
                adb kill-server
                sudo su
                /home/m/android-sdk-linux/platform-tools/adb start-server
                exit
6Help
                http://hi.baidu.com/juicewb/item/40d96b20b03b24132b0f1c90

USB:
1查看usb设备记录
                lsusb
2添加usb设备到配置文件然后在/etc/udev/rules.d/下创建一个配置文件: 51-android.rules
                sudo vim /etc/udev/rules.d/50-android.rules
3 文件里添加如下配置参数:
                SUBSYSTEM==""usb"", SYSFS{""High Tech Computer Corp.""}==""0bb4"", MODE=""0666""
4               sudo chmod a+rx /etc/udev/rules.d/50-android.rules
5               sudo /etc/init.d/udev restart
6               sudo adb kill-server
7               sudo adb devices

Firefox:
1Download
                http://www.mozilla.org/en-US/firefox/all.html
2Extract
                cd ~/Downloads/
                tar xjf firefox-17.0.tar.bz2
                Move to /opt"sudo rm -r /opt/firefox
                sudo mv firefox /opt/firefox17
4Set up symbolic links
                “Backup” the old Firefox launcher: sudo mv /usr/bin/firefox /usr/bin/firefox-old
                Create a symbolic link pointing to the new Firefox version: sudo ln -s /opt/firefox17/firefox /usr/bin/firefox"


Python:
下载源代码
                http://www.python.org/ftp/python/2.5.2/Python-2.5.2.tar.bz2
安装
                $ tar –jxvf Python-2.5.2.tar.bz2
                $ cd Python-2.5.2
                $ ./configure
                $ make
                $ sudo make install

快捷方式：
1.先在桌面上随便建一个空白文档，内容为：
[Desktop Entry]
Name=Eclipse
Comment=Eclipse IDE
Exec=/opt/eclipse/eclipse
Icon=/opt/eclipse/icon.xpm
Terminal=false
Type=Application
Categories=Application;Development;

[Desktop Entry]
Name=Sublime
Comment=Sublime
Exec=/home/jiahuixing/tools/"Sublime Text 2"/
Icon=/home/jiahuixing/tools/"Sublime Text 2"/Icon/256x256
Terminal=false
Type=Application
Categories=Application;Development;

2.名字改为 name.desktop(name就是你想取的名字)
3.然后右键属性就可以改图标和命令了，最好在权限里面也修改下允许执行，然后把这个文件放到你想放的地方，执行一下，在侧栏锁定，就ok了，既有图标，还可以执行！
                $ cd <eclipse dir>
                $ ln -sf $JRE_HOME jre
目的是在eclipse安装目录下建立一个名称为jre的链接，将其指向java安装目录下的jre目录。

Pydev:
http://crazycrab.sinaapp.com/archives/198
Pydev - http://pydev.org/updates/

打开Eclipse，在工具栏上选择Help->Install New Software
弹出的对话框中，我们点击“Add”按钮，弹出如图2所示的对话框。在对话框中，Name项我们随便填个名
    例如pydev；在Location中我们填写http://www.fabioz.com/pydev/updates，最后点击“OK”。
当Eclipse重新启动后，我们需要配置一下pydev插件，让其可以找到本地安装的python。我们选择window->Preferences
在弹出的对话框的左侧，我们找到Pydev->Interpreter – Python，再在右侧的窗口上点击“New”按钮，在弹出的“Select Interpreter”
对话框中配置好python的安装目录，选择“OK”。Eclipse会自动将python安装目录中的内容导入
在一个pydev的空项目建立完毕了。但是在新建py文件前，我们需要在空项目里新建一个包，这里类似与java的创建包的过程。
在“”中找到我们的项目，右键单击“src”文件夹，新建一个pydev包
这样的话，在pydev包中会自动创建一个__init__.py文件，我们现在可以在里面写python代码了。写个简单点的，
打印“Hello,Python!”（print “Hello,Python!”）

SVN:
$ sudo apt-get install subversion
$ sudo apt-get install libapache2-svn
svn://10.237.2.56/trunk/user/jiahuixing


PHP+Mysql+Nginx:
http://wenku.baidu.com/view/d764d6bf1a37f111f1855b0a.html
http://www.cuitu.net/content/ubuntu-1204-lts-xia-zhuang-nginx-php5-php-fpm-mysql
1 以root身份登录
                sudo su
2 安装 MySQL 5
                apt-get install mysql-server mysql-client
3 安装 Nginx
                apt-get install nginx
4 开启 nginx
                /etc/init.d/nginx start
5 安装 PHP5
                apt-get install php5-fpm
6 配置 nginx
                vim /etc/nginx/nginx.conf
                code：
                worker_processes  4;
                keepalive_timeout   2;
                vim /etc/nginx/sites-available/default
                code：
                [...]
server {
	listen   80; ## listen for ipv4; this line is default and implied
	listen   [::]:80 default ipv6only=on; ## listen for ipv6
	root /usr/share/nginx/www;
	index index.php index.html index.htm;
	# Make site accessible from http://localhost/
	server_name _;
	location / {
			# First attempt to serve request as file, then
			# as directory, then fall back to index.html
			try_files $uri $uri/ /index.html;
	}
	location /doc {
			root /usr/share;
			autoindex on;
			allow 127.0.0.1;
			deny all;
	}
	#error_page 404 /404.html;
	# redirect server error pages to the static page /50x.html
	#
	error_page 500 502 503 504 /50x.html;
	location = /50x.html {
			root /usr/share/nginx/www;
	}
	# proxy the PHP scripts to Apache listening on 127.0.0.1:80
	#
	#location ~ \.php$ {
	#       proxy_pass http://127.0.0.1;
	#}
	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	location ~ \.php$ {
			try_files $uri =404;
			fastcgi_pass 127.0.0.1:9000;
			fastcgi_index index.php;
			include fastcgi_params;
	}
	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	location ~ /\.ht {
			deny all;
	}
}
                [...]
7 重新加载ngnix
                /etc/init.d/nginx reload
8 探测
                 vim /usr/share/nginx/www/info.php
                 code:
<?php
phpinfo();
?>

7 PHP
                apt-cache search php5
                apt-get install php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl
8 重启php
                /etc/init.d/php5-fpm restart
9 Making PHP-FPM Use A Unix Socket
                vim /etc/php5/fpm/pool.d/www.conf
                [...]
                ;listen = 127.0.0.1:9000
                listen = /tmp/php5-fpm.sock
                [...]
                
                /etc/init.d/php5-fpm reload
                vim /etc/nginx/sites-available/default
                [...]
location ~ \.php$ {
		try_files $uri =404;
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_pass unix:/tmp/php5-fpm.sock;
		fastcgi_index index.php;
		include fastcgi_params;
}
                [...]
                
                /etc/init.d/nginx reload
			sudo apt-get install expect
Eclipse+ADT:
1 出现问题 Cannot complete the install because one or more required items could not be found 
                http://download.eclipse.org/tools/cdt/releases/juno

UIautomator:
1 Create a new Java project in Eclipse, and give your project a name that is relevant to the tests you’re about to create (for example, "MyAppNameTests"). 
In the project, you will create the test cases that are specific to the application that you want to test.
2 From the Project Explorer, right-click on the new project that you created, then select Properties > Java Build Path, and do the following: 
    Click Add Library > JUnit then select JUnit3 to add JUnit support.
    Click Add External JARs... and navigate to the SDK directory. Under the platforms directory, 
    select the latest SDK version and add both the uiautomator.jar and android.jar files.
    If you did not configure Eclipse as your development environment, make sure that the uiautomator.jar and 
    android.jar files from the <android-sdk>/platforms/<sdk> directory are in your Java class path.
3 http://developer.android.com/tools/testing/testing_ui.html

Linux adb 识别小米手机2:
mkdir ~/.android
echo "0x2717" > ~/.android/adb_usb.ini


ubuntu定时：crontab

http://blog.csdn.net/physicsdandan/article/details/7328743

最近几天折腾了一下crontab。现在就开始总结梳理一下。

crontab的作用：定时自动让操作系统执指定的任务。

一：crontab基本命令

crontab  -e 　编辑该用户的crontab，当指定crontab  不存在时新建。

crontab  -l 　列出该用户的crontab。

crontab  -r 　删除该用户的crontab。

crontab  -u <用户名称> 　指定要设定crontab的用户名称。

crontab –v 显示上一次编辑的时间（只在某些操作系统上可用）

二：crontab时间参数格式说明

-----------------------------------------------------------------------

英文 # m   h       dom    mon   dow   command

中文分钟  小时  日期    月份   周       命令

范围0-59   0-23 1-31   1-12   0-7    ……

ps：周里的0或7都是代表星期天。

----------------------------------------------------------

时间格式中的特殊字符代表的意义

1.『*』 匹配任意时间。（1 * * * * *  command 代表每月，每周，每日，每时的第一分钟都执行command）

2.『,』  列举时间点。（1，2，3  * * * *  command 代表每月，每周，每日，每时的第1，2，3分钟执行command ）

3.『-』  列举时间段。（ 1-4 * * * *  command 代表每月，每周，每日，每时的从第一分钟到第四分钟都执行command）

4.『/n』 每隔n个单位间隔。（*/5 * * * *  command 代表每隔5分钟执行一次command。注意是*/5，不是/5）

三：编辑crontab模式

1.使用crontab -e 命令。这种是针对一般用户指定自己的命令。

2.直接编辑/etc/crontab ，指定系统的例行性任务。

四：示例

root@ubuntu:~# crontab -e

[html] view plaincopy

      GNU nano 2.2.2        File: /tmp/crontab.zLc01Z/crontab                         
      
    # m h  dom mon dow   command  
    #* */2 * * * php /var/www/nginx-default/sundries/battery_queue.php  
    #* */2 * * * php /var/www/nginx-default/sundries/battery_push.php  
    */1 * * * *  php /var/www/nginx-default/test/crontab.php  
    */1 * * * *  echo "good">>/tmp/test.txt  

echo执行结果：
[plain] view plaincopy

    root@ubuntu:~# cat /tmp/test.txt  
    good  
    good  
    good  
    good  

crontab.php的执行结果：
[plain] view plaincopy

    root@ubuntu:~# cat /var/www/nginx-default/test/test.txt  
    2012-03-06 23:59:01  
    2012-03-07 00:00:01  

crontab.php的源码：

[plain] view plaincopy

    #!/usr/bin/php -q  
    <?php  
    $file='/var/www/nginx-default/test/test.txt';   
    //chmod($file,0777);  
    file_put_contents($file,date('Y-m-d H:i:s')."\n",FILE_APPEND );  

ps:一定要加上第一句，让crontab找到php解析器来解析php文件。

五：crontab日志

（centos默认情况下,crontab中执行的日志写在/var/log下
#ls /var/log/cron*
/var/log/cron /var/log/cron.1 /var/log/cron.2 /var/log/cron.3 /var/log/cron.4）

crontab的日志默认是关闭的。但是我们还是需要检查crontab是否正确执行了没有，那么log将是我的指导师。
因为crontab所有的错误和输出都会发送给使用用户的mail里去。在网上查了下，原来这个mail不是真正的email而是指/var/spool/mail，如果你是用的root来执行命令，那么就在/var/spool/mail/root下。但是我直接输出good的没发现送到root的mail里，所以有待验证。还有一种经过我验证过的方法是：1.找到/etc/rsyslog.d/50-default.conf文件；2.找到有#cron那行，去掉#；3.重启rsyslog
[plain] view plaincopy

    root@ubuntu:~# vi /etc/rsyslog.d/50-default.conf   

[plain] view plaincopy

    #  Default rules for rsyslog.  
    #  
    #                       For more information see rsyslog.conf(5) and /etc/rsyslog.conf  
      
    #  
    # First some standard log files.  Log by facility.  
    #  
    auth,authpriv.*                 /var/log/auth.log  
    *.*;auth,authpriv.none          -/var/log/syslog  
    #cron.*                          /var/log/cron.log  
    daemon.*                        -/var/log/daemon.log  
    kern.*                          -/var/log/kern.log  
    lpr.*                           -/var/log/lpr.log  
    mail.*                          -/var/log/mail.log  
    user.*                          -/var/log/user.log  
      
      
    #  
    # Logging for the mail system.  Split it up so that  
    # it is easy to write scripts to parse these files.  
    #  

[plain] view plaincopy

    root@ubuntu:~# /etc/init.d/rsyslog restart  

查看cron日志文件

[html] view plaincopy

    root@ubuntu:~# cat /var/log/cron.log  
    Mar  6 22:07:01 ubuntu CRON[5793]: (root) CMD (php /var/www/nginx-default/test/crontab.php)  
    Mar  6 22:07:01 ubuntu CRON[5794]: (root) CMD (echo "good">>/tmp/test.txt)  
    Mar  6 22:08:01 ubuntu CRON[5814]: (root) CMD (echo "good">>/tmp/test.txt)  
    Mar  6 22:08:01 ubuntu CRON[5815]: (root) CMD (php /var/www/nginx-default/test/crontab.php)  
    Mar  6 22:08:30 ubuntu cron[5827]: (CRON) DEATH (can't lock /var/run/crond.pid, otherpid may be 4414: Resource temporarily unavailable)  
    Mar  6 22:09:01 ubuntu CRON[5843]: (root) CMD (php /var/www/nginx-default/test/crontab.php)  
    Mar  6 22:09:01 ubuntu CRON[5844]: (root) CMD (echo "good">>/tmp/test.txt)  
    Mar  6 22:09:01 ubuntu CRON[5845]: (root) CMD (  [ -x /usr/lib/php5/maxlifetime ] && [ -d /var/lib/php5 ] && find /var/lib/php5/ -type f -cmin +$(/usr/lib/php5/maxlifetime) -print0 | xargs -n 200 -r -0 rm)  

这下就可以看到crontab到底执行了指令列表没有！ 

Git:

	http://wenku.baidu.com/view/0245a911c281e53a5802ff24.html
	
	http://wenku.baidu.com/view/6ee21505bed5b9f3f90f1cf8.html
	
	http://wenku.baidu.com/view/14331a0090c69ec3d5bb7591.html
	
	在Ubuntu下安装git的过程，一般系统没有安装zlib.h所以要自己安装

　　首先下载git包:

　　$ cd ~/tmp

　　$ wget http://www.kernel.org/pub/software/scm/git/git-1.6.0.2.tar.gz

　　解压:

　　$ tar xvzf git-1.6.0.2.tar.gz

　　Build它:

　　$ cd git-1.6.0.2

　　$ ./configure --prefix=/usr/bin

　　$ make

　　然后看见了错误 "zlib.h No such file or directory"

　　zlib.h 包含在 zlibg1-dev中;

　　openssl/rand.h 包含在 libssl-dev中，系统没装。OK, 安装~

　　$ sudo apt-get install zlib1g-dev libssl-dev

　　然后再跑make.

　　$ make

　　一般这里不会出错了，如果有可能

　　又看见错误 "tclsh failed; using unoptimized loading"。

　　$ sudo apt-get install build-essential tcl8.4 tk8.4 gettext

　　成功~ 嗒嗒嗒~

　　$ sudo make install

　　运行成功后，check下git的版本

　　$ git --version

　　如有提示“程序“git”尚未安装。 您可以使用以下命令安装：

　　sudo apt-get install git-core

	------------------------------------
	
	
虚拟机共享：

sudo apt-get install open-vm-dkms
sudo mount -t vmhgfs .host:/ /mnt/hgfs
cd /mnt/hgfs

1.在虚拟机系统没有运行的情况下，点击虚拟机工具栏的VM->settings->options->Shared Folders,按照提示添加一个你要共享的windows下的文件夹。
2.安装vmtools,vmtools安装成功后会看到目录/mnt/hgfs.如果没有该目录则可以手动建立
3.ubuntu终端下运行 sudo apt-get install open-vm-dkms
4.进入目录：/etc/init.d，把"sudo mount -t vmhgfs .host:/ /mnt/hgfs"写到open-vm-tools文件的最后一行（需要root权限，可以用命令：sudo vi open-vm-tools）。
5.在当前目录：/etc/init.d/运行，"sudo ./open-vm-tools restart"，运行成功后你会在目录:/mnt/hgfs下面看到你共享的文件夹



 第一步：启动Ubuntu 12.04(其他版本的Ubuntu操作差不多)

    1. 在VMware虚拟机界面，点VM->Install VMware Tools。之后，点击Ubuntu 窗口中主文件 按钮然后再左边会看见设备里有VMware tools文件夹，双击之，并且解压其中的压缩文件，把它拷贝到主文件夹
    2. 打开Terminal终端，进入解压的文件夹中，输入以下命令：
           a) sudo tar zxf VMwareTools-xxx.tar.gz (注：xxx为版本号)
           b) cd /vmware-tools-distrib
           c) sudo ./vmware-install.pl
        安装过程中一直按enter即可，或者输入【】提示yes和no，直到安装完毕。
    3. 查看结果：
           lsmod | grep vmblock

第二步：设置共享文件夹的目录
        1. 将Ubuntu关机（power off），否则不能添加共享文件夹
        2. 在VMware虚拟机窗口，选择VM->Settings->Options->Shared Folders
        3. 点右边的Add，点Next->选择Win7共享目录的路径，然后点Next->选中Enable this share->Finish
        4. 在VM->Settings->Options->Shared Folders窗口的右边，Folder sharing栏里选择Always enabled
        5. 点 OK 确定退出

但在这里还没有完成，一点要进行第三步才可以完成文件共享。

第三步：在Ubuntu虚拟机下安装插件
        1. 执行 sudo apt-get install open-vm-dkms (注：如果安装过，以后就不用执行这一行)
        2. 执行 sudo mount -t vmhgfs .host:/ /mnt/hgfs
        3. cd /mnt/hgfs

至此就可以在/mnt/hgfs目录下看到Win7的共享文件夹目录。无论在linux还是在Win7下修改共享文件夹里的文件，都会在另一个系统同时修改。




fastboot 没有权限:

fastboot flash boot out/target/product/generic/boot.img不管用，提示< waiting for device >

原因查找：

用fastboot命令查看设备提示无权限，如下：

$ fastboot -l devices
no permissions         fastboot usb:2-1.3

于是知道是因为权限问题，是fastboot没有权限， 解决步骤：

1. 将fastboot的所有者属性改成root

用which fastboot命令找到fastboot所在的目录，然后进入此目录；再用命令chown改其属性:

sudo chown root:root fastboot

2. 将其权限更改一下：

sudo chmod +s fastboot



Git 安装：

服务：
	http://www.codesky.net/article/201205/171984.html
	http://blog.chinaunix.net/uid-22956619-id-3274890.html
	

Help：
	http://milkythinking.com/blog/2011/04/17/install_git_and_manual/

源码地址：
	https://www.kernel.org/pub/software/scm/git/
	
	sudo apt-get install git
	


bash 自定义command：
	添加文件.bash_aliases	
	如添加命令：bugreport 则输入：alias bugreport='./bugreport/bugreport.sh'
	或在.bashrc 中 添加命令：alias bugreport='./bugreport/bugreport.sh'
	保存文件执行：
	. .bashrc  . .bash_aliases
	
	
	
# ~/.bash_aliases: to store some user-defined command

#alias bugreport
alias bugreport='. ~/Python/flashPhone/bugreport.sh'

#alias adb devices
alias devices='. ~/Python/flashPhone/devices.sh'

#alias root devices
alias root_devices='. ~/Python/flashPhone/root_devices'	
	